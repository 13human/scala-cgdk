package model

import CanBeEmpty.CanBeEmptyOps

/**
  * Этот класс описывает игровой мир. Содержит также описания всех игроков и игровых объектов (<<юнитов>>).
  * @param tick  Возвращает номер текущего тика.
  * @param tickCount  Возвращает базовую длительность игры в тиках.
  *         Реальная длительность может отличаться от этого значения в меньшую сторону.
  *         Поле может быть определено как { @code game.initialFreezeDurationTicks + game.lapCount * game.lapTickCount}.
  *         Значение поля не меняется в процессе игры. Эквивалентно { @code game.tickCount}.
  * @param lastTickIndex  Возвращает номер последнего тика игры.
  *         Сразу после старта содержит значение { @code tickCount - 1}.
  *         В момент завершения трассы любым из кодемобилей получает значение
  *         { @code min(tickCount - 1, tick + max(floor(game.burningTimeDurationFactor * game.lapTickCount), 1))}.
  *         Таким образом, кодемобиль, отставший от идущего впереди более, чем на { @code game.burningTimeDurationFactor}
  *         кругов, рискует не успеть вообще добраться до финиша.
  *         <p/>
  *         Игра может закончиться раньше, чем наступит { @code lastTickIndex}, если для каждого игрока выполняется одно
  *         из двух условий: стратегия игрока <<упала>>, либо все его кодемобили финишировали.
  * @param width  Возвращает ширину мира в тайлах.
  * @param height  Возвращает высоту мира в тайлах.
  * @param players  Возвращает список игроков (в случайном порядке).
  *         После каждого тика объекты, задающие игроков, пересоздаются.
  * @param cars  Возвращает список кодемобилей (в случайном порядке).
  *         После каждого тика объекты, задающие кодемобили, пересоздаются.
  * @param projectiles  Возвращает список снарядов (в случайном порядке).
  *         После каждого тика объекты, задающие снаряды, пересоздаются.
  * @param bonuses  Возвращает список бонусов (в случайном порядке).
  *         После каждого тика объекты, задающие бонусы, пересоздаются.
  * @param oilSlicks  Возвращает список масляных луж (в случайном порядке).
  *         После каждого тика объекты, задающие лужи, пересоздаются.
  * @param mapName  Возвращает краткое уникальное название трассы.
  * @param tilesXY  Возвращает двумерный массив тайлов, где первое измерение --- это позиция X, а второе --- Y.
  *         Конвертировать позицию в точные координаты можно, используя значение { @code game.trackTileSize}.
  * @param waypoints  Возвращает массив ключевых тайлов. Каждый тайл задаётся массивом длины 2,
  *         где элемент с индексом { @code 0} содержит позицию X, а элемент с индексом { @code 1} --- позицию Y.
  *         Конвертировать позицию в точные координаты можно, используя значение { @code game.trackTileSize}.
  *         Для прохождения круга кодемобилю необходимо посещать тайлы в указанном порядке.
  *         Ключевой тайл с индексом { @code 0} является одновременно начальным тайлом трассы и конечным тайлом каждого круга.
  *         Считается, что кодемобиль посетил ключевой тайл, если центр кодемобиля пересёк границу этого тайла.
  * @param startingDirection  Направление кодемобиля в начале игры.
  */
class World(val tick: Int,
            val tickCount: Int,
            val lastTickIndex: Int,
            val width: Int,
            val height: Int,
            val players: Vector[Player],
            val cars: Vector[Car],
            val projectiles: Vector[Projectile],
            val bonuses: Vector[Bonus],
            val oilSlicks: Vector[OilSlick],
            val mapName: String,
            val tilesXY: Vector[Vector[TileType]],
            val waypoints: Vector[Vector[Int]],
            val startingDirection: Direction) {

  /**
    * @return Возвращает вашего игрока.
    */
 lazy val myPlayer:  Option[Player] = players.find { p => p.isDefined && p.me }
}

object World extends CanBeEmpty[World]